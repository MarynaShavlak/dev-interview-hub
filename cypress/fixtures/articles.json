[
    {
        "img": "https://i.ytimg.com/vi/S3cBIww_6os/maxresdefault.jpg",
        "category": ["IT"],
        "user": {
            "lastname": "lastnameUser",
            "username": "testuser",
            "email": "testuser@gmail.com",
            "firstname": "Test",
            "id": "nwPyI60mR9XWY3ozVuRGItx08PY2",
            "avatar": "https://s1.1zoom.ru/big3/992/367659-alexfas01.jpg",
            "features": {
                "isArticleRatingEnabled": true,
                "isAppRedesigned": true
            }
        },
        "subtitle": {
            "text": "Джерело:",
            "link": "https://foxminded.ua/zamykannia-javascript/"
        },
        "views": 7657,
        "id": "158",
        "blocks": [
            {
                "title": "",
                "type": "TEXT",
                "paragraphs": [
                    "Замикання javascript можуть бути корисними в безлічі сценаріїв програмування, даючи змогу створювати приватні змінні та методи, передавати функції як аргументи, використовувати функції зворотного виклику та багато іншого. Вони є невід’ємною частиною мови JavaScript і допомагають розробникам створювати гнучкіший і ефективніший код.",
                    "У наступних розділах ми детальніше розглянемо роботу замикань, способи їхнього створення та використання, а також потенційні проблеми, з якими можна зіткнутися під час їхнього використання"
                ],
                "id": "1"
            },
            {
                "paragraphs": [
                    "Давайте уявимо, що у нас є функція, яка живе всередині іншої. І ця внутрішня функція може бачити і використовувати змінні із зовнішньої. Ось як це може виглядати:"
                ],
                "id": "2",
                "type": "TEXT",
                "title": "Що це таке"
            },
            {
                "id": "4",
                "code": "function outerFunction() {\n\n  var outerVariable = 'Привіт, я змінна із зовнішньої функції!';\n\n  function innerFunction() {\n\n    console.log(outerVariable);\n\n  }\n\n  return innerFunction;\n\n}\n\nvar myFunction = outerFunction();\n\nmyFunction(); // Виводить \"Привіт, я змінна із зовнішньої функції!\"",
                "type": "CODE"
            },
            {
                "title": "",
                "id": "3",
                "paragraphs": [
                    "У цьому прикладі innerFunction є замиканням, тому що вона може отримати доступ до змінної outerVariable, яка визначена у зовнішній функції outerFunction. Навіть після того, як зовнішня функція закінчила свою роботу і повернула innerFunction, замикання все ще пам’ятає значення outerVariable і може використати його при виклику myFunction().",
                    "Давайте розглянемо ще один приклад, щоб прояснити поняття замикань:"
                ],
                "type": "TEXT"
            },
            {
                "type": "CODE",
                "code": "function counter() {\n\n  var count = 0;\n\n  function increment() {\n\n    count++;\n\n    console.log(count);\n\n  }\n\n  function decrement() {\n\n    count--;\n\n    console.log(count);\n\n  }\n\n  return {\n\n    increment: increment,\n\n    decrement: decrement\n\n  };\n\n}\n\nvar myCounter = counter();\n\nmyCounter.increment(); // Виводить 1\n\nmyCounter.increment(); // Виводить 2\n\nmyCounter.decrement(); // Виводить 1",
                "id": "41"
            },
            {
                "type": "TEXT",
                "id": "5",
                "title": "",
                "paragraphs": [
                    "У цьому прикладі counter – це зовнішня функція, яка створює дві внутрішні – increment і decrement. Кожна з них має доступ до змінної count, оголошеної всередині counter. Коли ми викликаємо counter(), ми отримуємо об’єкт із двома методами increment і decrement. Ми можемо викликати ці методи, щоб збільшувати або зменшувати значення count і бачити результати в консолі.",
                    "Таким чином, замикання дозволяють нам створювати функції, які запам’ятовують значення змінних, визначених у їхніх зовнішніх функціях. Це корисно для збереження стану та створення приватних змінних і методів, які недоступні ззовні. Пам’ятайте, що замикання можуть бути дуже потужним інструментом у JavaScript, і їхнє розуміння допоможе вам писати більш гнучкий та ефективний код.\n\n"
                ]
            },
            {
                "title": "Створення замикань",
                "paragraphs": [
                    "Замикання створюються в момент виконання коду, коли функція оголошується всередині іншої або блоку коду. Ось кілька практичних прикладів, які допоможуть вам краще зрозуміти, як це відбувається."
                ],
                "id": "6",
                "type": "TEXT"
            },
            {
                "id": "81",
                "type": "IMAGE",
                "title": "Рис.1 Створення замикання",
                "src": "https://cdn-ckkcn.nitrocdn.com/zFBNvlNnhjnAtIruckhWUtdrrYcfdzYJ/assets/images/source/rev-52b0cf6/foxminded.ua/wp-content/uploads/2023/09/zamikania-js-1024x576.jpg"
            },
            {
                "title": "Приклад 1. Замикання з використанням аргументу функції",
                "paragraphs": [],
                "type": "TEXT",
                "id": "82437"
            },
            {
                "id": "494552",
                "type": "CODE",
                "code": "function outerFunction(name) {\n\n  function innerFunction() {\n\n    console.log('Привіт, ' + name + '!');\n\n  }\n\n  return innerFunction;\n\n}\n\nvar greetJohn = outerFunction('John');\n\ngreetJohn(); // Виводить \"Привіт, John!\"\n\nvar greetAnna = outerFunction('Anna');\n\ngreetAnna(); // Виводить \"Привіт, Anna!\""
            },
            {
                "id": "855",
                "type": "TEXT",
                "title": "",
                "paragraphs": [
                    "У цьому прикладі innerFunction є замиканням, яке має доступ до аргументу name, переданого у зовнішню функцію outerFunction. Коли ми викликаємо outerFunction(‘John’), ми створюємо замикання greetJohn, яке запам’ятовує значення name рівне ‘John’. Аналогічно, при виклику outerFunction(‘Anna’), ми створюємо замикання greetAnna, яке запам’ятовує значення name, що дорівнює ‘Anna’. При виклику цих замикань вони виводять привітання з відповідним ім’ям."
                ]
            },
            {
                "title": "Приклад 2. Замикання з використанням локальної змінної зовнішньої функції",
                "type": "TEXT",
                "paragraphs": [],
                "id": "9"
            },
            {
                "code": "function counter() {\n\n  var count = 0;\n\n  function increment() {\n\n    count++;\n\n    console.log('Поточне значення: ' + count);\n\n  }\n\n  return increment;\n\n}\n\nvar myCounter = counter();\n\nmyCounter(); // Виводить \"Поточне значення: 1\"\n\nmyCounter(); // Виводить \"Поточне значення: 2\"",
                "type": "CODE",
                "id": "912"
            },
            {
                "title": "",
                "paragraphs": [
                    "Тут counter – це зовнішня функція, яка оголошує локальну змінну count. Потім вона повертає внутрішню функцію increment, яка має доступ до змінної count. Коли ми викликаємо counter(), ми отримуємо замикання myCounter, яке запам’ятовує значення count і збільшує його при кожному виклику. Ми можемо викликати myCounter і бачити, як значення count збільшується.",
                    "Отже, ви бачите, як просто створювати замикання в JavaScript. Вони дають змогу зберігати стан змінних і мати доступ до них усередині функцій, що робить ваш код гнучким."
                ],
                "id": "955",
                "type": "TEXT"
            },
            {
                "title": "Потенційні проблеми",
                "type": "TEXT",
                "paragraphs": [
                    "Давайте обговоримо деякі потенційні проблеми, з якими ви можете зіткнутися під час використання замикань у JavaScript. Хоча замикання є потужним інструментом, неправильне їх використання може призвести до деяких небажаних наслідків:",
                    "1. Одна з найпоширеніших проблем – це витік пам’яті. Коли функція, яка є замиканням, має доступ до змінних або об’єктів, більше не потрібних, вони продовжують займати пам’ять. Щоб уникнути витоків пам’яті, важливо бути уважними під час використання замикань і переконатися, що вони не зберігають посилання на великі обсяги даних або об’єкти, які більше не потрібні. Зазвичай достатньо звільнити посилання на ці дані, щоб дозволити збирачу сміття видалити їх із пам’яті.",
                    "2. Використання замикань може призвести до невеликого зниження продуктивності. Коли замикання викликається, воно повинно звернутися до своїх зовнішніх змінних, що вимагає деякого часу. У більшості випадків це непомітно, але якщо замикання викликається безліч разів у циклі або всередині критично важливої ділянки коду, процес може сповільнитися.",
                    "3. Неправильне використання замикань може призвести до помилок і несподіваної поведінки коду. Наприклад, якщо не акуратно поводитися зі змінними, оголошеними всередині замикання, може виникнути конфлікт і несподівана зміна значення змінної. Важливо бути уважними і розуміти, які змінні доступні і як вони можуть бути змінені.",
                    "4. Ще одна проблема – це втрата контексту виконання функції. Коли замикання передається і викликається в іншому контексті, може виникнути проблема з доступом до змінних і об’єктів, на які воно очікує. У таких випадках може знадобитися явне прив’язування контексту при передачі замикання.",
                    "Важливо розуміти ці потенційні проблеми і бути обережними під час використання замикань у своєму коді. Хороша практика – це тестування і перевірка свого коду на наявність витоків пам’яті та несподіваної поведінки."
                ],
                "id": "788"
            },
            {
                "title": "Використання в реальних сценаріях",
                "type": "TEXT",
                "paragraphs": [
                    "Давайте розглянемо деякі реальні сценарії, у яких замикання можуть бути корисними. Це допоможе вам краще зрозуміти, як їх використовувати у своїх проєктах."
                ],
                "id": "9559"
            },
            {
                "type": "TEXT",
                "title": "",
                "id": "923",
                "paragraphs": [
                    "Приклад 1. Створення приватних змінних і методів в об’єкт"
                ]
            },
            {
                "code": "function createPerson(name) {\n\n  var age = 0;\n\n  function increaseAge() {\n\n    age++;\n\n  }\n\n  return {\n\n    getName: function() {\n\n      return name;\n\n    },\n\n    getAge: function() {\n\n      return age;\n\n    },\n\n    celebrateBirthday: function() {\n\n      increaseAge();\n\n    }\n\n  };\n\n}\n\nvar person = createPerson('John');\n\nconsole.log(person.getName()); // Виводить \"John\"\n\nconsole.log(person.getAge()); // Виводить 0\n\nperson.celebrateBirthday();\n\nconsole.log(person.getAge()); // Виводить 1",
                "id": "548569680",
                "type": "CODE"
            },
            {
                "id": "927",
                "paragraphs": [
                    "У цьому прикладі ми створюємо об’єкт person, який має приватні змінні name і age, а також методи для отримання імені та віку (getName і getAge). Замикання дозволяє цим методам мати доступ до приватних змінних name і age. Метод celebrateBirthday викликає внутрішню функцію increaseAge, яка збільшує значення age на одиницю. Таким чином, ми можемо безпечно змінювати й отримувати значення змінних через методи об’єкта, а вони залишаються недоступними ззовні."
                ],
                "title": "",
                "type": "TEXT"
            },
            {
                "type": "TEXT",
                "paragraphs": [
                    "Приклад 2. Функції зворотного виклику (Callback functions)"
                ],
                "id": "928",
                "title": ""
            },
            {
                "code": "function fetchData(url, callback) {\n\n  // Логіка отримання даних з API\n\n  var data = '...'; // Отримані дані\n\n  callback(data);\n\n}\n\nfetchData('https://api.example.com', function(data) {\n\n  console.log('Отримані дані:', data);\n\n});",
                "id": "412436",
                "type": "CODE"
            },
            {
                "title": "",
                "id": "9543721",
                "type": "TEXT",
                "paragraphs": [
                    "У цьому прикладі функція fetchData приймає URL і функцію зворотного виклику callback. Усередині fetchData ми отримуємо дані з API і зберігаємо їх у змінній data. Потім ми викликаємо callback і передаємо їй отримані дані. Замикання тут дає змогу передавати дані між функціями та зберігати контекст виконання. У наведеному прикладі ми передаємо анонімну функцію як callback, яка виводить отримані дані в консоль.",
                    "Це лише два приклади використання замикань, і є безліч інших сценаріїв, де вони можуть бути корисними. Наприклад, в асинхронних операціях, обробці подій або при створенні модульної структури коду.",
                    "Використання замикань дає змогу створювати більш гнучкий і модульний код, зберігаючи приватні дані та методи, а також передаючи контекст виконання між функціями. Вони допомагають уникнути глобальних змінних і конфліктів імен, а також сприяють підвищенню безпеки та зручності використання коду"
                ]
            },
            {
                "type": "TEXT",
                "title": "Висновок",
                "paragraphs": [
                    "У цій статті ми розглянули що таке замикання js і його важливість у контексті JavaScript. Ми вивчили, як вони працюють на простих прикладах для програмістів-початківців. Також ми обговорили потенційні проблеми, включно з витоками пам’яті, і розглянули приклади використання замикань у реальних сценаріях",
                    "Сподіваюся, ця стаття допомогла вам краще зрозуміти замикання в JavaScript і надихнула на створення більш якісного коду з використанням цієї потужної концепції."
                ],
                "id": "909547"
            }
        ],
        "createdAt": "05.09.2023",
        "title": "Як працюють замикання в JavaScript"
    },
    {
        "id": "40",
        "user": {
            "id": "qkcVyIbnjYeEbaYVKGhtZrny7GC3",
            "lastname": "Cooper",
            "firstname": "Sarah",
            "avatar": "https://firebasestorage.googleapis.com/v0/b/dev-interview-hub.firebasestorage.app/o/users%2FScreenshot_2.jpg?alt=media&token=74c79b27-557e-4457-9eb8-6a6f88cf9fca",
            "username": "sarahManager",
            "email": "sarahManager@gmail.com"
        },
        "img": "",
        "createdAt": "01.01.2024",
        "views": 509,
        "blocks": [
            {
                "type": "TEXT",
                "id": "1",
                "paragraphs": [
                    "React Router — це бібліотека для управління маршрутизацією в додатках React. Вона дозволяє створювати односторінкові додатки (SPA) з можливістю навігації між різними компонентами.",
                    "React Router забезпечує динамічну навігацію без перезавантаження сторінки."
                ],
                "title": "Визначення React Router"
            },
            {
                "title": "Основні компоненти",
                "type": "TEXT",
                "paragraphs": [
                    "1. **BrowserRouter**: обгортка для маршрутизації на основі HTML5 History API.\n2. **Route**: визначає маршрут для компонента.\n3. **Link**: елемент для навігації між маршрутами."
                ],
                "id": "2"
            },
            {
                "id": "3",
                "type": "CODE",
                "title": "Приклад використання React Router",
                "code": "import { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\n<Router>\n  <Link to='/about'>Про нас</Link>\n  <Route path='/about' component={About} />\n</Router>;"
            },
            {
                "src": "https://example.com/react-router-diagram.jpg",
                "title": "Схема роботи React Router",
                "id": "4",
                "type": "IMAGE"
            }
        ],
        "category": ["React"],
        "subtitle": { "text": "Джерело:", "link": "https://reactrouter.com/" },
        "title": "Що таке React Router?"
    },
    {
        "title": "Які стратегії міграції з JavaScript на TypeScript ви знаєте?",
        "views": 873,
        "user": {
            "id": "Hrsg32Jr4uQS7P4HusvSAQ7R8Zt2",
            "email": "emmaUser@gmail.com",
            "avatar": "https://firebasestorage.googleapis.com/v0/b/dev-interview-hub.firebasestorage.app/o/users%2FScreenshot_4.jpg?alt=media&token=8df64704-d170-4e14-a571-cff7fe2d8009",
            "lastname": "Anderson",
            "username": "emmaUser",
            "firstname": "Emma"
        },
        "createdAt": "01.04.2023",
        "category": ["TypeScript", "JavaScript"],
        "blocks": [
            {
                "title": "Міграція на TypeScript",
                "paragraphs": [
                    "Міграція з JavaScript на TypeScript може бути поступовою. Одна з основних стратегій — це почати з додавання файлів з розширенням `.ts` в існуючий проект та поступово додавати типи.",
                    "Також корисно спочатку додати TypeScript до нових модулів, поступово перетворюючи старі файли."
                ],
                "id": "1",
                "type": "TEXT"
            },
            {
                "title": "Стратегія поступового впровадження",
                "paragraphs": [
                    "1. Почніть з простих типів та перевірки.",
                    "2. Використовуйте інструменти для автоматичного перетворення коду.",
                    "3. Навчіться відловлювати помилки за допомогою інструментів, таких як ESLint."
                ],
                "id": "2",
                "type": "TEXT"
            }
        ],
        "id": "174",
        "subtitle": {
            "text": "Поради щодо міграції з JavaScript на TypeScript"
        }
    },
    {
        "category": ["CSS"],
        "img": "",
        "views": 318,
        "title": "На рівні із чим буде специфічність у псевдоелемента і псевдокласа?",
        "createdAt": "04.03.2024",
        "subtitle": {
            "link": "https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes_and_pseudo-elements",
            "text": "Джерело:"
        },
        "user": {
            "username": "johnManager",
            "email": "johnManager@gmail.com",
            "avatar": "https://firebasestorage.googleapis.com/v0/b/dev-interview-hub.firebasestorage.app/o/users%2F666666.jpg?alt=media&token=cae6fc1c-d860-4915-9d8a-de00cee89bb3",
            "firstname": "John",
            "id": "d6RJwaIJmjbHTV2PdSg04DpPjWl1",
            "lastname": "Doe"
        },
        "id": "94",
        "blocks": [
            {
                "id": "1",
                "type": "TEXT",
                "title": "Псевдокласи та псевдоелементи",
                "paragraphs": [
                    "Псевдокласи (наприклад, :hover) та псевдоелементи (наприклад, ::before) також мають специфічність, яка базується на селекторах, до яких вони додаються.",
                    "Специфічність псевдокласів та псевдоелементів можна розглядати як збільшення специфічності базового селектора."
                ]
            },
            {
                "type": "CODE",
                "id": "2",
                "title": "Приклад специфічності псевдокласів",
                "code": ".button:hover {\n  background-color: green;\n}\n\n#header::before {\n  content: 'Welcome';\n}"
            },
            {
                "id": "3",
                "title": "Специфічність у псевдокласах",
                "type": "TEXT",
                "paragraphs": [
                    "Наприклад, якщо у вас є селектор .button з специфічністю 0-1-0, то .button:hover матиме специфічність 0-1-1."
                ]
            }
        ]
    },
    {
        "category": ["HTML, CSS"],
        "createdAt": "08.10.2024",
        "id": "50",
        "user": {
            "firstname": "John",
            "username": "johnManager",
            "email": "johnManager@gmail.com",
            "id": "d6RJwaIJmjbHTV2PdSg04DpPjWl1",
            "lastname": "Doe",
            "avatar": "https://firebasestorage.googleapis.com/v0/b/dev-interview-hub.firebasestorage.app/o/users%2F666666.jpg?alt=media&token=cae6fc1c-d860-4915-9d8a-de00cee89bb3"
        },
        "img": "",
        "title": "Що таке потік HTML-документа?",
        "blocks": [
            {
                "id": "1",
                "paragraphs": [
                    "Потік HTML-документа описує, як браузер інтерпретує і відображає елементи на сторінці, враховуючи їх порядок, стилі та властивості."
                ],
                "type": "TEXT",
                "title": "Потік документа"
            },
            {
                "type": "TEXT",
                "paragraphs": [
                    "Правильне структурування HTML-документа допомагає уникнути проблем з відображенням та робить код більш зрозумілим."
                ],
                "title": "Важливість потоку",
                "id": "2"
            }
        ],
        "subtitle": {
            "link": "https://www.w3schools.com/html/html_flow.asp",
            "text": "Джерело:"
        },
        "views": 262
    },
    {
        "id": "96",
        "category": ["JavaScript"],
        "img": "https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM/shadowdom.svg",
        "createdAt": "01.01.2023",
        "subtitle": {
            "link": "https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM",
            "text": "Джерело:"
        },
        "views": 392,
        "title": "Що таке DOM і Shadow DOM? В чому їх різниця?",
        "user": {
            "lastname": "Brown",
            "username": "lucyAdmin",
            "email": "lucyAdmin@gmail.com",
            "id": "ObGe2X8MNTde2RSffQgE0Jpxek72",
            "firstname": "Lucy",
            "avatar": "https://firebasestorage.googleapis.com/v0/b/dev-interview-hub.firebasestorage.app/o/users%2FScreenshot_8.jpg?alt=media&token=628a974f-7de9-4f6d-a392-cea9aa6874d7"
        },
        "blocks": [
            {
                "paragraphs": [
                    "DOM (Document Object Model) - це об'єктна модель, що представляє структуру HTML-документа у вигляді дерева. Це дозволяє програмам і скриптам динамічно змінювати вміст, структуру та стиль веб-сторінки.",
                    "DOM є глобальною об'єктною моделлю, доступною з JavaScript, що дозволяє взаємодіяти з HTML-елементами."
                ],
                "type": "TEXT",
                "id": "1",
                "title": "DOM"
            },
            {
                "paragraphs": [
                    "Shadow DOM - це частина веб-компонентів, яка дозволяє створювати ізольовані від основного DOM частини веб-сторінки.",
                    "Це дозволяє створювати компоненти, які мають власні стилі і структуру, що не впливають на зовнішні елементи."
                ],
                "id": "2",
                "type": "TEXT",
                "title": "Shadow DOM"
            },
            {
                "code": "const shadowHost = document.createElement('div');\nconst shadowRoot = shadowHost.attachShadow({ mode: 'open' });\nshadowRoot.innerHTML = `<style>h1 { color: blue; }</style><h1>Hello Shadow DOM!</h1>`;\ndocument.body.appendChild(shadowHost);",
                "title": "Приклад Shadow DOM",
                "id": "3",
                "type": "CODE"
            }
        ]
    }
]
